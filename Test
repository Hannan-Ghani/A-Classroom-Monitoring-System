const fs = require('fs');
const { deepEqual } = require('fast-deep-equal');

// Function to read JSON file
const readJSONFile = (filePath) => {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, 'utf8', (err, data) => {
      if (err) {
        reject(err);
        return;
      }
      try {
        resolve(JSON.parse(data));
      } catch (error) {
        reject(error);
      }
    });
  });
};

// Function to generate and save HTML output
const generateHTML = (json1, json2, differences, outputPath) => {
  let htmlContent = `<html><head><style>
  .difference { background-color: #ffcccc; }
  </style></head><body>
  <table><tr><td>${JSON.stringify(json1, null, 2)}</td>
  <td>${JSON.stringify(json2, null, 2)}</td></tr></table>
  <div>Differences: <pre>${differences.join('\n')}</pre></div>
  </body></html>`;

  fs.writeFile(outputPath, htmlContent, (err) => {
    if (err) {
      console.error('Error writing HTML file:', err);
    } else {
      console.log(`Comparison HTML saved to ${outputPath}`);
    }
  });
};

// Function to compare JSON files and generate HTML output
const compareJSONFiles = async (filePath1, filePath2, outputPath) => {
  try {
    const json1 = await readJSONFile(filePath1);
    const json2 = await readJSONFile(filePath2);
    const differences = []; // Placeholder for difference logic

    // Logic to find differences goes here (for demonstration, using deepEqual check)
    const isEqual = deepEqual(json1, json2);
    if (!isEqual) {
      differences.push('JSON objects are not identical.');
      // Extend this logic to detail specific differences
    }

    generateHTML(json1, json2, differences, outputPath);
  } catch (error) {
    console.error('Error comparing JSON files:', error);
  }
};

// Example usage with command line arguments
if (process.argv.length < 5) {
  console.log('Usage: node compare.js <jsonFile1> <jsonFile2> <outputHtmlFile>');
} else {
  compareJSONFiles(process.argv[2], process.argv[3], process.argv[4]);
}
