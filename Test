const fs = require('fs');
const diff = require('deep-diff').diff;

// Reads a JSON file and parses it into an object.
function readJSONFile(filePath) {
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

// Marks differences between two JSON objects by modifying the target object.
function markDifferences(original, target) {
  const differences = diff(original, target) || [];
  differences.forEach(difference => {
    let node = target;
    for (let i = 0; i < difference.path.length - 1; i++) {
      node = node[difference.path[i]];
    }
    const key = difference.path[difference.path.length - 1];
    switch (difference.kind) {
      case 'N': // New property
        node[key] = { _value: node[key], _type: 'added' };
        break;
      case 'D': // Deleted property
        node[key] = { _value: difference.lhs, _type: 'deleted' };
        break;
      case 'E': // Edited property
        node[key] = { _oldValue: difference.lhs, _value: difference.rhs, _type: 'edited' };
        break;
      case 'A': // Array change (simplified handling)
        markDifferences(difference.item.lhs, node[key]);
        break;
    }
  });
}

// Converts a JSON object to an HTML string, applying styling based on the type of changes.
function jsonToHtml(json) {
  if (json && typeof json === 'object') {
    const entries = Object.entries(json).map(([key, value]) => {
      if (value && typeof value === 'object' && value._type) {
        return `<div>"${key}": <span class="${value._type}">${JSON.stringify(value._value)}</span></div>`;
      } else {
        return `<div>"${key}": ${jsonToHtml(value)}</div>`;
      }
    });
    return `{${entries.join('')}}`;
  } else {
    return JSON.stringify(json);
  }
}

// Main function that reads JSON files, marks differences, and generates an HTML output.
function compareAndHighlight(jsonFilePath1, jsonFilePath2, outputHtmlPath) {
  const originalJson = readJSONFile(jsonFilePath1);
  const modifiedJson = readJSONFile(jsonFilePath2);

  markDifferences(originalJson, modifiedJson);
  const htmlContent = jsonToHtml(modifiedJson);

  const fullHtml = `<html><head><style>
    .added { background-color: #ddffdd; }
    .deleted { background-color: #ffdddd; }
    .edited { background-color: #ffffcc; }
    body { font-family: monospace; }
    </style></head><body>${htmlContent}</body></html>`;

  fs.writeFileSync(outputHtmlPath, fullHtml, 'utf8');
  console.log(`The comparison result has been saved to ${outputHtmlPath}`);
}

// Example usage
compareAndHighlight('original.json', 'modified.json', 'output.html');
