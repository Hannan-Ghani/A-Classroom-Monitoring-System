def readPathConfig(config: Array[String]): Map[String, String] = {
  config.filterNot(line => line.trim.isEmpty || line.trim.startsWith("#")).flatMap { line =>
    val trimmedLine = line.trim // Trim the entire line
    trimmedLine.split("=").map(_.trim) match { // Trim key and value
      case Array(key, value) if key.nonEmpty && value.nonEmpty =>
        Some(key -> value)
      case _ =>
        logger.warn(s"Invalid line in path config: $line")
        None
    }
  }.toMap
}

def parseValidationConfig(config: Array[String]): Map[String, String] = {
  config.filterNot(line => line.trim.isEmpty || line.trim.startsWith("#")).flatMap { line =>
    val trimmedLine = line.trim // Trim the entire line
    trimmedLine.split(":").map(_.trim) match { // Trim validation type and columns
      case Array(validationType, columns) if validationType.nonEmpty && columns.nonEmpty =>
        Some(validationType -> columns)
      case _ =>
        logger.warn(s"Invalid line in validation config: $line")
        None
    }
  }.toMap
}