import com.amazonaws.services.glue.GlueContext
import com.amazonaws.services.glue.util.Job
import org.apache.spark.SparkContext
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.DataFrame
import com.amazonaws.services.glue.util.GlueArgParser
import org.apache.spark.sql.functions._
import org.apache.log4j.Logger
import scala.io.Source

object CleanseCaseClass {

  def main(sysArgs: Array[String]): Unit = {
    // Initialize Glue and Spark context
    val spark: SparkContext = new SparkContext()
    val glueContext: GlueContext = new GlueContext(spark)
    val sparkSession: SparkSession = glueContext.getSparkSession
    import sparkSession.implicits._

    val logger: Logger = Logger.getLogger("CleanseCaseClass")

    // Get the S3 config path from Glue job parameters
    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq("s3ConfigPath").toArray)
    val s3ConfigPath = args("s3ConfigPath")

    // Read the configuration file from S3 (assuming it is a text file)
    val configFile = sparkSession.read.textFile(s3ConfigPath).collect()

    // Parse the configuration file and create a map of validation types and columns
    val configMap = parseConfig(configFile)

    // Extract input and output paths from the config map
    val inputSourcePath = configMap.getOrElse("inputSourcePath", "")
    val inputTargetPath = configMap.getOrElse("inputTargetPath", "")
    val outputBasePath = configMap.getOrElse("outputCombinedExceptPath", "")

    // =======================
    // PART 1: Read Source and Target Data
    // =======================
    val transactionSource: DataFrame = sparkSession.read.parquet(inputSourcePath)
    val caseClass: DataFrame = sparkSession.read.parquet(inputTargetPath)

    // =======================
    // PART 2: Apply Validations Dynamically Based on Config
    // =======================

    configMap.foreach { case (validationType, columns) =>
      validationType match {
        case "null" =>
          applyNullValidation(columns, caseClass, outputBasePath)
        case "direct" =>
          applyDirectColumnValidation(columns, transactionSource, caseClass, outputBasePath)
        case "narrative" =>
          applyNarrativeValidation(columns, transactionSource, caseClass, outputBasePath)
        case "amountLocal" =>
          applyAmountLocalValidation(columns, transactionSource, caseClass, outputBasePath)
        case "transactionCountryISO3" =>
          applyTransactionCountryISO3Validation(columns, transactionSource, caseClass, outputBasePath)
        case _ =>
          logger.warn(s"Unknown validation type: $validationType")
      }
    }

    // Commit the Glue job to mark it as successfully completed
    Job.commit()
  }

  // Helper function to parse the config file and extract validation types and columns
  def parseConfig(config: Array[String]): Map[String, String] = {
    config.filterNot(_.startsWith("#")).map { line =>
      val Array(validationType, columns) = line.split(":").map(_.trim)
      validationType -> columns
    }.toMap
  }

  // =======================
  // PART 3: Validation Functions
  // =======================

  // Null Value Validation
  def applyNullValidation(columns: String, caseClass: DataFrame, outputBasePath: String): Unit = {
    val colSeq = columns.replace("columns=", "").split(",").map(_.trim)
    val nullColumns = filterExistingColumns(caseClass, colSeq)
    val nullData = caseClass.select(nullColumns.map(col): _*).distinct()

    val nullValidationOutputPath = s"${outputBasePath}/null_validation/"
    nullData.write.mode("overwrite").parquet(nullValidationOutputPath)
  }

  // Direct Column Validation
  def applyDirectColumnValidation(columns: String, transactionSource: DataFrame, caseClass: DataFrame, outputBasePath: String): Unit = {
    val Array(sourceCols, targetCols) = columns.split("target=").map(_.trim)
    val sourceColumns = sourceCols.replace("columns_source=", "").split(",").map(_.trim)
    val targetColumns = targetCols.split(",").map(_.trim)

    val (existingSourceColumns, existingTargetColumns) = filterExistingColumnPairs(sourceColumns, targetColumns, transactionSource, caseClass)

    val sourceDirectData = transactionSource.select(existingSourceColumns.map(col): _*)
    val targetDirectData = caseClass.select(existingTargetColumns.map(col): _*)

    val directSourceToTargetDiff = sourceDirectData.exceptAll(targetDirectData)
    val directTargetToSourceDiff = targetDirectData.exceptAll(sourceDirectData)

    val directOutputPathSourceToTarget = s"${outputBasePath}/direct_column_validation/source_to_target/"
    val directOutputPathTargetToSource = s"${outputBasePath}/direct_column_validation/target_to_source/"

    directSourceToTargetDiff.write.mode("overwrite").parquet(directOutputPathSourceToTarget)
    directTargetToSourceDiff.write.mode("overwrite").parquet(directOutputPathTargetToSource)
  }

  // Narrative Validation
  def applyNarrativeValidation(columns: String, transactionSource: DataFrame, caseClass: DataFrame, outputBasePath: String): Unit = {
    val Array(sourceNarrative, targetNarrative) = columns.split("target=").map(_.trim)
    val sourceNarrativeCol = sourceNarrative.replace("source=", "").trim
    val targetNarrativeCol = targetNarrative.trim

    val sourceNarrativeData = transactionSource.withColumn(
      sourceNarrativeCol,
      when(trim(col(sourceNarrativeCol)) === "", null)
        .when(trim(col(sourceNarrativeCol)) === "*", null)
        .otherwise(col(sourceNarrativeCol))
    ).select($"TRANSACTION_ID", col(sourceNarrativeCol))

    val targetNarrativeData = caseClass.select($"transactionid", col(targetNarrativeCol))

    val narrativeSourceToTargetDiff = sourceNarrativeData.exceptAll(targetNarrativeData)
    val narrativeTargetToSourceDiff = targetNarrativeData.exceptAll(sourceNarrativeData)

    val narrativeOutputPathSourceToTarget = s"${outputBasePath}/narrative_validation/source_to_target/"
    val narrativeOutputPathTargetToSource = s"${outputBasePath}/narrative_validation/target_to_source/"

    narrativeSourceToTargetDiff.write.mode("overwrite").parquet(narrativeOutputPathSourceToTarget)
    narrativeTargetToSourceDiff.write.mode("overwrite").parquet(narrativeOutputPathTargetToSource)
  }

  // Amount Local Validation
  def applyAmountLocalValidation(columns: String, transactionSource: DataFrame, caseClass: DataFrame, outputBasePath: String): Unit = {
    val Array(sourceCol, targetCol) = columns.split("target=").map(_.trim)
    val sourceAmountCol = sourceCol.replace("source=", "").trim
    val targetAmountCol = targetCol.trim

    val sourceAmountData = transactionSource.select($"TRANSACTION_ID", col(sourceAmountCol))
    val targetAmountData = caseClass.select($"transactionId", col(targetAmountCol))

    val amountLocalSourceToTargetDiff = sourceAmountData.exceptAll(targetAmountData)
    val amountLocalTargetToSourceDiff = targetAmountData.exceptAll(sourceAmountData)

    val amountLocalOutputPathSourceToTarget = s"${outputBasePath}/amountLocal_validation/source_to_target/"
    val amountLocalOutputPathTargetToSource = s"${outputBasePath}/amountLocal_validation/target_to_source/"

    amountLocalSourceToTargetDiff.write.mode("overwrite").parquet(amountLocalOutputPathSourceToTarget)
    amountLocalTargetToSourceDiff.write.mode("overwrite").parquet(amountLocalOutputPathTargetToSource)
  }

  // Transaction Country ISO3 Validation
  def applyTransactionCountryISO3Validation(columns: String, transactionSource: DataFrame, caseClass: DataFrame, outputBasePath: String): Unit = {
    val Array(sourceCol, targetCol) = columns.split("target=").map(_.trim)
    val sourceCountryCol = sourceCol.replace("source=", "").trim
    val targetCountryCol = targetCol.trim

    val mappingUDF = udf((input: String) => Map(
      "AD" -> "AND", "AE" -> "ARE", "AF" -> "AFG", "AG" -> "ATG", "AI" -> "AIA"
    ).getOrElse(input, input))

    val sourceTransactionCountry = transactionSource.withColumn("transactionCountryIso3Mapped", mappingUDF(col(sourceCountryCol)))
    val targetTransactionCountry = caseClass.select(col(targetCountryCol))

    val countryIso3SourceToTargetDiff = sourceTransactionCountry.select($"transactionCountryIso3Mapped").exceptAll(targetTransactionCountry)
    val countryIso3TargetToSourceDiff = targetTransactionCountry.exceptAll(sourceTransactionCountry.select($"transactionCountryIso3Mapped"))

    val countryIso3OutputPathSourceToTarget = s"${outputBasePath}/transactionCountryIso3_validation/source_to_target/"
    val countryIso3OutputPathTargetToSource = s"${outputBasePath}/transactionCountryIso3_validation/target_to_source/"

    countryIso3SourceToTargetDiff.write.mode("overwrite").parquet(countryIso3OutputPathSourceToTarget)
    countryIso3TargetToSourceDiff.write.mode("overwrite").parquet(countryIso3OutputPathTargetToSource)
  }

  // Helper function to filter out missing columns
  def filterExistingColumns(df: DataFrame, columns: Seq[String]): Seq[String] = {
    val existingColumns = df.columns.toSet
    columns.filter(existingColumns.contains)
  }

  // Helper function to filter out missing column pairs for comparison
  def filterExistingColumnPairs(sourceColumns: Seq[String], targetColumns: Seq[String], sourceDF: DataFrame, targetDF: DataFrame): (Seq[String], Seq[String]) = {
    val existingSourceColumns = sourceDF.columns.toSet
    val existingTargetColumns = targetDF.columns.toSet
    val filteredSourceColumns = sourceColumns.filter(existingSourceColumns.contains)
    val filteredTargetColumns = targetColumns.filter(existingTargetColumns.contains)
    (filteredSourceColumns, filteredTargetColumns)
  }
}