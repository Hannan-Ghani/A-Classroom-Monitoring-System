Yes, you can write the mappings in the configuration file with each entry on a new line, like this:

[mapping]
AD:AND,
AE:ARE,
AF:AFG,
...

However, to avoid potential issues:
	•	Ensure there is no trailing comma on the last entry (e.g., AF:AFG should not be followed by a comma).
	•	The configuration parser should handle line breaks correctly and treat each line as a separate mapping entry.

To support this format, you’ll need a slight modification to the parseIso3Mapping function to handle line breaks instead of commas between mappings.

Updated parseIso3Mapping Function

Here’s an updated version of parseIso3Mapping that processes mappings line by line, without relying on a single comma-separated line:

def parseIso3Mapping(configLines: Seq[String]): Map[String, String] = {
  configLines.flatMap { line =>
    val trimmedLine = line.trim.stripSuffix(",")  // Remove trailing comma, if any
    if (trimmedLine.nonEmpty) {
      val Array(code2, code3) = trimmedLine.split(":").map(_.trim)
      Some(code2 -> code3)
    } else {
      None
    }
  }.toMap
}

Updated parseValidationConfig Function to Use parseIso3Mapping

In parseValidationConfig, collect lines for the [mapping] section as a Seq[String] and pass them to parseIso3Mapping:

def parseValidationConfig(configPath: String, sparkSession: SparkSession): Map[String, Any] = {
  import sparkSession.implicits._
  var currentSection = ""
  var validationConfig = Map[String, Any]()
  var mappingLines = Seq[String]()

  sparkSession.read.text(configPath).as[String].collect().foreach { line =>
    val trimmedLine = line.trim
    if (trimmedLine.startsWith("[") && trimmedLine.endsWith("]")) {
      if (currentSection == "mapping" && mappingLines.nonEmpty) {
        validationConfig += ("iso3Mapping" -> parseIso3Mapping(mappingLines))
        mappingLines = Seq.empty  // Reset for next section
      }
      currentSection = trimmedLine.substring(1, trimmedLine.length - 1)
    } else if (trimmedLine.nonEmpty) {
      currentSection match {
        case "transaction_country_iso3_validation_source" =>
          validationConfig += ("sourceColumn" -> trimmedLine)
        case "transaction_country_iso3_validation_target" =>
          validationConfig += ("targetColumn" -> trimmedLine)
        case "mapping" =>
          mappingLines :+= trimmedLine  // Collect mapping lines
        case _ => // Handle other sections as needed
      }
    }
  }

  // Handle final mapping section if at the end of file
  if (currentSection == "mapping" && mappingLines.nonEmpty) {
    validationConfig += ("iso3Mapping" -> parseIso3Mapping(mappingLines))
  }

  validationConfig
}

Explanation

	•	parseIso3Mapping: Processes each line individually, removes any trailing commas, and skips empty lines.
	•	parseValidationConfig:
	•	Collects lines for the [mapping] section as mappingLines.
	•	Passes mappingLines to parseIso3Mapping once the [mapping] section ends or at the end of the file.

Usage

Now, you can use your configuration format like this without issues:

[mapping]
AD:AND,
AE:ARE,
AF:AFG,
...

This will allow you to manage each mapping on a separate line, making it easier to edit and extend. Let me know if you have further questions!