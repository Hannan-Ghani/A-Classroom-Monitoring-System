To integrate this type of validation into your existing code, you can follow these steps:

1. Add Configuration Support

	•	Update your configuration file to specify columns for this “not null” validation.
	•	For example, add a section in the configuration file, such as:

[non_null_validation]
aAccountNumberCleansed, anotherColumn, moreColumns


	•	This will allow flexibility if you want to add more columns in the future.

2. Define a New Validation Function

	•	Add a new function (e.g., validateNonNullColumns) in your codebase that follows the provided logic:
	•	Select the specified columns.
	•	Filter rows where these columns are not null.
	•	Collect the resulting non-null values for reporting.

3. Implement the Validation Logic in the Function

	•	The function will:
	•	Retrieve the relevant columns from the configuration.
	•	Apply a .filter() on each column to find rows where the value is not null.
	•	Collect and format the results.

Sample Code for validateNonNullColumns

Here’s how to add this function:

def validateNonNullColumns(df: DataFrame, columns: Seq[String]): Seq[String] = {
  import df.sparkSession.implicits._
  val existingColumns = filterExistingColumns(df, columns)
  
  if (existingColumns.nonEmpty) {
    val nonNullValues = existingColumns.flatMap { column =>
      val nonNullData = df.select(column).filter(col(column).isNotNull)
      val nonNullIds = nonNullData.as[String].collect()
      if (nonNullIds.nonEmpty) {
        Some(s"Non-Null Validation for $column: ${nonNullIds.length} found " + nonNullIds.mkString(", "))
      } else {
        None
      }
    }
    Seq("Non-Null Validation Differences:") ++ nonNullValues.flatten
  } else {
    Seq("Non-Null Validation: No relevant columns found for non-null validation.")
  }
}

4. Call the New Validation Function

	•	Call this function from the main method, similar to the other validations:

validationResults = validationResults ++ validateNonNullColumns(caseClass, validationConfigMap.getOrElse("non_null_validation", Seq()))



This will add a “non-null” validation check for the specified columns, similar to the logic you used in Jupyter. Let me know if you need further customization for this!