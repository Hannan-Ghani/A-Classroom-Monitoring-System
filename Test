def applyNarrativeValidation(columns: String, transactionSource: DataFrame, caseClass: DataFrame, outputBasePath: String): Unit = {
  // Correctly split source and target columns based on `;`
  val Array(sourceNarrative, targetNarrative) = columns.split(";").map(_.trim) 
  
  // Remove `source=` and `target=` and trim any extra spaces
  val sourceNarrativeCol = sourceNarrative.replace("source=", "").trim
  val targetNarrativeCol = targetNarrative.replace("target=", "").trim

  logger.info(s"Source narrative column: $sourceNarrativeCol")
  logger.info(s"Target narrative column: $targetNarrativeCol")

  // Select the columns for comparison
  val sourceNarrativeData = transactionSource
    .select(col("TRANSACTION_ID"), col(sourceNarrativeCol))
  val targetNarrativeData = caseClass
    .select(col("transactionid"), col(targetNarrativeCol))

  // Perform exceptAll comparison
  val narrativeSourceToTargetDiff = sourceNarrativeData.exceptAll(targetNarrativeData)
  val narrativeTargetToSourceDiff = targetNarrativeData.exceptAll(sourceNarrativeData)

  // Write output to S3
  val narrativeOutputPathSourceToTarget = s"${outputBasePath}/narrative_validation/source_to_target/"
  val narrativeOutputPathTargetToSource = s"${outputBasePath}/narrative_validation/target_to_source/"

  narrativeSourceToTargetDiff.write.mode("overwrite").parquet(narrativeOutputPathSourceToTarget)
  narrativeTargetToSourceDiff.write.mode("overwrite").parquet(narrativeOutputPathTargetToSource)
}