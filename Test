import com.amazonaws.services.glue.GlueContext
import com.amazonaws.services.glue.util.Job
import org.apache.spark.SparkContext
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.DataFrame
import com.amazonaws.services.glue.util.GlueArgParser
import org.apache.spark.sql.functions._
import org.apache.log4j.Logger

object CleanseCaseClass {

  def main(sysArgs: Array[String]): Unit = {
    // Initialize Glue and Spark context
    val spark: SparkContext = new SparkContext()
    val glueContext: GlueContext = new GlueContext(spark)
    val sparkSession: SparkSession = glueContext.getSparkSession
    import sparkSession.implicits._

    // Logger setup
    val logger: Logger = Logger.getLogger("CleanseCaseClassLogger")

    // Get the S3 config path from Glue job parameters
    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq("s3ConfigPath").toArray)
    val s3ConfigPath = args("s3ConfigPath")

    // Read the configuration file from S3
    val configDF = sparkSession.read.text(s3ConfigPath)

    // Convert the config DataFrame into a Map of key-value pairs
    val configMap = configDF.collect().map { row =>
      val split = row.getString(0).split("=")
      (split(0), split(1))
    }.toMap

    // Extract input and output paths from the config file
    val inputSourcePath = configMap("inputSourcePath")
    val inputTargetPath = configMap("inputTargetPath")
    val outputBasePath = configMap("outputCombinedExceptPath") // Base path for output files

    // =======================
    // PART 1: Read Source and Target Data
    // =======================

    // Read the transaction source Parquet file from the inputSourcePath in the config file
    val transactionSource: DataFrame = sparkSession.read.parquet(inputSourcePath)
      .filter($"transaction_date" > "2023-01-01" && $"transaction_date" < "2023-01-31")

    // Read the case class DataFrame from the inputTargetPath in the config file
    val caseClass: DataFrame = sparkSession.read.parquet(inputTargetPath)

    // =======================
    // transactionCountryIso3 Validation (with separate Parquet file)
    // =======================

    // Define the mapping UDF for transactionCountryIso3
    val mappingUDF = udf((input: String) => Map(
      "AD" -> "AND", "AE" -> "ARE", "AF" -> "AFG", "AG" -> "ATG", "AI" -> "AIA"
      // Add other mappings as needed
    ).getOrElse(input, input))

    // Apply the UDF and perform the comparison
    val sourceTransactionCountry = transactionSource.withColumn("transactionCountryIso3Mapped", mappingUDF($"TRANSACTION_COUNTRY"))
    val targetTransactionCountry = caseClass.select($"transactionCountryIso3")

    // Perform the validation using exceptAll
    val transactionCountryIso3Validation = sourceTransactionCountry
      .select($"transactionCountryIso3Mapped")
      .exceptAll(targetTransactionCountry)

    // Write the validation result to a separate Parquet file
    val transactionCountryIso3OutputPath = s"${outputBasePath}/transactionCountryIso3_validation/"
    transactionCountryIso3Validation.write.mode("overwrite").parquet(transactionCountryIso3OutputPath)

    // =======================
    // New Combined Validation (accountNumberCleansed, sort codes, amountLocal, transactionUniqueId, etc.)
    // =======================

    // Validation for aAccountNumberCleansed, aSortCodeCleansed, bAccountNumberCleansed, bSortCodeCleansed
    val combinedValidation = caseClass
      .select(
        $"aAccountNumberCleansed",
        $"aSortCodeCleansed",
        $"bAccountNumberCleansed",
        $"bSortCodeCleansed"
      )
      .filter(
        $"aAccountNumberCleansed".isNotNull ||
        $"aSortCodeCleansed".isNotNull ||
        $"bAccountNumberCleansed".isNotNull ||
        $"bSortCodeCleansed".isNotNull
      )

    // ====== amountLocal Validation ======
    val sourceAmountLocal = transactionSource.select($"TRANSACTION_ID", $"ORIGINAL_AMOUNT")
    val targetAmountLocal = caseClass.select($"transactionId", $"amountLocal")
    val amountLocalValidation = sourceAmountLocal.exceptAll(targetAmountLocal)

    // ====== transactionUniqueId Validation ======
    val sourceTransactionUniqueId = transactionSource
      .withColumn("transactionUniqueId", concat(col("TRANSACTION_ID"), lit("//"), col("EFF_START_DATE")))
      .select($"TRANSACTION_ID", $"transactionUniqueId")

    val targetTransactionUniqueId = caseClass.select($"transactionId", $"transactionUniqueId")
    val transactionUniqueIdValidation = sourceTransactionUniqueId.exceptAll(targetTransactionUniqueId)

    // ====== aAccountNumber Validation ======
    val sourceAAccountNumber = caseClass
      .withColumn(
        "aAccountNumber",
        when(substring($"aAccountId", 1, 5) isin ("UKUBA"), substring($"aAccountId", 9, 8))
          .when(substring($"aAccountId", 1, 5) isin ("UKGTS"), substring($"aAccountId", 8, 9))
          .otherwise(null)
      )
      .select($"transactionId", $"aAccountNumber")

    val targetAAccountNumber = caseClass.select($"transactionId", $"aAccountNumber")
    val aAccountNumberValidation = sourceAAccountNumber.exceptAll(targetAAccountNumber)

    // ====== bAccountNumber Validation ======
    val sourceBAccountNumber = caseClass
      .withColumn(
        "bAccountNumber",
        when(substring($"bAccountId", 1, 5) isin ("UKUBA"), substring($"bAccountId", 9, 8))
          .when(substring($"bAccountId", 1, 5) isin ("UKGTS"), substring($"bAccountId", 8, 9))
          .otherwise(null)
      )
      .select($"transactionId", $"bAccountNumber")

    val targetBAccountNumber = caseClass.select($"transactionId", $"bAccountNumber")
    val bAccountNumberValidation = sourceBAccountNumber.exceptAll(targetBAccountNumber)

    // Combine all validations into one DataFrame
    val finalCombinedValidation = combinedValidation
      .union(amountLocalValidation)
      .union(transactionUniqueIdValidation)
      .union(aAccountNumberValidation)
      .union(bAccountNumberValidation)

    // Write the combined validation results to a single Parquet file
    val combinedValidationOutputPath = s"${outputBasePath}/combined_validation/"
    finalCombinedValidation.write.mode("overwrite").parquet(combinedValidationOutputPath)

    // =======================
    // Existing Validations (narrative, null, direct column, etc.)
    // =======================
    // (You can keep your existing code here for other validations)

    // Commit the Glue job to mark it as successfully completed
    Job.commit()
  }
}