def readPathConfig(config: Array[String]): Map[String, String] = {
  logger.info(s"Config file contents: ${config.mkString("\n")}") // Log config for debugging

  config.filterNot(line => line.trim.isEmpty || line.trim.startsWith("#")).flatMap { line =>
    val splitLine = line.split("=").map(_.trim) // Split the line by "="
    if (splitLine.length == 2) {
      Some(splitLine(0) -> splitLine(1)) // Expecting exactly two parts: key and value
    } else {
      logger.warn(s"Invalid line in path config: $line") // Log invalid lines
      None
    }
  }.toMap
}

def parseValidationConfig(config: Array[String]): Map[String, String] = {
  logger.info(s"Validation config contents: ${config.mkString("\n")}") // Log validation config

  config.filterNot(line => line.trim.isEmpty || line.trim.startsWith("#")).flatMap { line =>
    val splitLine = line.split(":").map(_.trim) // Split the line by ":"
    if (splitLine.length == 2) {
      Some(splitLine(0) -> splitLine(1)) // Expecting exactly two parts: validationType and columns
    } else {
      logger.warn(s"Invalid line in validation config: $line") // Log invalid lines
      None
    }
  }.toMap
}