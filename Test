def loadConfig(s3Path: String): Map[String, String] = {
  try {
    val s3 = AmazonS3ClientBuilder.defaultClient()
    val uri = new java.net.URI(s3Path)
    val bucket = uri.getHost
    val key = uri.getPath.drop(1)  // Drop the leading '/'

    println(s"Attempting to load config from bucket: $bucket, key: $key")
    
    val s3Object = s3.getObject(bucket, key)
    val inputStream: InputStream = s3Object.getObjectContent
    val configLines = Source.fromInputStream(inputStream).getLines().toList

    println("Config file content:")
    configLines.foreach(println)

    // Parse lines with "=" and log any skipped lines
    val configMap = configLines.filter(_.contains("=")).map { line =>
      val parts = line.split("=", 2)
      parts(0).trim -> parts(1).trim
    }.toMap

    println("Parsed config map:")
    configMap.foreach { case (key, value) => println(s"$key -> $value") }

    configMap
  } catch {
    case e: Exception =>
      println(s"Error loading configuration file from $s3Path: ${e.getMessage}")
      throw e
  }
}