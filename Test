// =======================
// Null Validation
// =======================
val nullColumns = validationConfigMap.getOrElse("null_validation", Seq())
val existingNullColumns = filterExistingColumns(caseClass, nullColumns)

if (existingNullColumns.nonEmpty) {
  val nonNullData = caseClass.filter(existingNullColumns.map(col => col(col).isNotNull).reduce(_ || _))
  val nonNullTransactionIds = nonNullData.select("transactionId").as[String].collect()  // Explicitly select transactionId
  writer.write("Null Validation Differences:\n")
  writer.write("Non-null values found for columns expected to be null in rows: " + nonNullTransactionIds.mkString(", ") + "\n\n")
} else {
  writer.write("Null Validation Differences: No relevant columns found for null validation.\n\n")
}

// =======================
// Direct Column Validation
// =======================
val sourceCols = validationConfigMap.getOrElse("direct_column_validation_source", Seq())
val targetCols = validationConfigMap.getOrElse("direct_column_validation_target", Seq())

val (alignedSourceCols, alignedTargetCols) = filterExistingColumnPairs(sourceCols, targetCols, transactionSource, caseClass)

if (alignedSourceCols.nonEmpty && alignedTargetCols.nonEmpty) {
  val sourceData = transactionSource.select($"TRANSACTION_ID", alignedSourceCols.zipWithIndex.map { case (col, i) => col(col).as(s"col_$i") }: _*)
  val targetData = caseClass.select($"transactionId", alignedTargetCols.zipWithIndex.map { case (col, i) => col(col).as(s"col_$i") }: _*)

  val sourceToTargetDiff = sourceData.except(targetData)
  val targetToSourceDiff = targetData.except(sourceData)

  val sourceToTargetIds = sourceToTargetDiff.select("TRANSACTION_ID").as[String].collect()  // Explicitly select TRANSACTION_ID
  val targetToSourceIds = targetToSourceDiff.select("transactionId").as[String].collect()  // Explicitly select transactionId

  writer.write("Direct Column Validation Differences:\n")
  writer.write("Source to Target Differences: " + sourceToTargetIds.mkString(", ") + "\n")
  writer.write("Target to Source Differences: " + targetToSourceIds.mkString(", ") + "\n\n")
} else {
  writer.write("Direct Column Validation Differences: No relevant columns found for direct validation.\n\n")
}

// =======================
// Narrative Validation
// =======================
val sourceNarrativeCol = validationConfigMap.getOrElse("narrative_validation_source", Seq()).headOption.getOrElse("")
val targetNarrativeCol = validationConfigMap.getOrElse("narrative_validation_target", Seq()).headOption.getOrElse("")

val cleanedSourceNarrative = transactionSource.withColumn("cleaned_narrative", 
  when(trim(col(sourceNarrativeCol)) === "" || trim(col(sourceNarrativeCol)) === "*", null)
    .otherwise(col(sourceNarrativeCol))
).select($"TRANSACTION_ID", $"cleaned_narrative")  // Explicitly select TRANSACTION_ID

val targetNarrative = caseClass.select($"transactionId", col(targetNarrativeCol).as("cleaned_narrative"))

val narrativeSourceToTargetDiff = cleanedSourceNarrative.except(targetNarrative)
val narrativeTargetToSourceDiff = targetNarrative.except(cleanedSourceNarrative)

val narrativeSourceToTargetIds = narrativeSourceToTargetDiff.select("TRANSACTION_ID").as[String].collect()  // Explicitly select TRANSACTION_ID
val narrativeTargetToSourceIds = narrativeTargetToSourceDiff.select("transactionId").as[String].collect()  // Explicitly select transactionId

writer.write("Narrative Validation Differences:\n")
writer.write("Source to Target Differences: " + narrativeSourceToTargetIds.mkString(", ") + "\n")
writer.write("Target to Source Differences: " + narrativeTargetToSourceIds.mkString(", ") + "\n\n")