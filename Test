def applyNullValidation(columns: String, caseClass: DataFrame)(implicit spark: SparkSession): DataFrame = {
    import spark.implicits._

    // Split the columns from config
    val nullColumns = columns.split(",").map(_.trim).toSeq

    // Filter exact matching columns
    val existingNullColumns = filterExistingColumns(caseClass, nullColumns)

    if (existingNullColumns.isEmpty) {
        logger.warn("No valid columns for null validation.")
        return spark.createDataFrame(spark.sparkContext.emptyRDD[Row], caseClass.schema) // Return empty DataFrame
    }

    // Select only the exact null columns
    val nullData = caseClass.select(existingNullColumns.map(col): _*).distinct()

    logger.info(s"Null Columns Selected: ${existingNullColumns.mkString(", ")}")
    nullData.withColumn("ValidationType", lit("Null Validation"))
}

def applyDirectColumnValidation(sourceCols: String, targetCols: String, transactionSource: DataFrame, caseClass: DataFrame)(implicit spark: SparkSession): DataFrame = {
    import spark.implicits._

    // Split the columns from config
    val sourceColumns = sourceCols.split(",").map(_.trim).toSeq
    val targetColumns = targetCols.split(",").map(_.trim).toSeq

    // Filter exact matching columns
    val (existingSourceColumns, existingTargetColumns) = filterExistingColumnPairs(sourceColumns, targetColumns, transactionSource, caseClass)

    if (existingSourceColumns.isEmpty || existingTargetColumns.isEmpty) {
        logger.warn("No valid columns left for direct column validation.")
        return spark.createDataFrame(spark.sparkContext.emptyRDD[Row], caseClass.schema) // Return empty DataFrame
    }

    // Select only the exact columns for validation
    val sourceDirectData = transactionSource.select(existingSourceColumns.map(col): _*)
    val targetDirectData = caseClass.select(existingTargetColumns.map(col): _*)

    logger.info(s"Source Columns Selected: ${existingSourceColumns.mkString(", ")}")
    logger.info(s"Target Columns Selected: ${existingTargetColumns.mkString(", ")}")

    // Perform validation
    val directSourceToTargetDiff = sourceDirectData.exceptAll(targetDirectData)
    val directTargetToSourceDiff = targetDirectData.exceptAll(sourceDirectData)

    // Combine results
    val combinedResult = directSourceToTargetDiff.withColumn("ValidationType", lit("Source-to-Target Validation"))
      .unionByName(directTargetToSourceDiff.withColumn("ValidationType", lit("Target-to-Source Validation")), allowMissingColumns = true)

    combinedResult
}