def validateTransactionUniqueIds(sourceDF: DataFrame, targetDF: DataFrame): Seq[String] = {
  import sourceDF.sparkSession.implicits._

  val sourceWithUniqueId = sourceDF
    .withColumn("transactionUniqueId", concat(col("transaction _id"), lit("//"), col("EFF_START_DATE")))
    .select($"transaction _id", $"transactionUniqueId")

  val targetWithUniqueId = targetDF.select($"transactionId", $"transactionUniqueId")

  val sourceToTargetDiff = sourceWithUniqueId.exceptAll(targetWithUniqueId)
  val targetToSourceDiff = targetWithUniqueId.exceptAll(sourceWithUniqueId)

  val sourceToTargetIds = sourceToTargetDiff.select($"transaction _id").as[String].collect()
  val targetToSourceIds = targetToSourceDiff.select($"transactionId").as[String].collect()

  val sourceToTargetCount = sourceToTargetIds.length
  val targetToSourceCount = targetToSourceIds.length

  if (sourceToTargetCount == 0 && targetToSourceCount == 0) {
    Seq("Transaction Unique ID Validation Differences: No differences found.")
  } else {
    Seq(
      "Transaction Unique ID Validation Differences:",
      s"Source to Target Differences: $sourceToTargetCount found " + sourceToTargetIds.mkString(", "),
      s"Target to Source Differences: $targetToSourceCount found " + targetToSourceIds.mkString(", ")
    )
  }
}