import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.functions._

def validateAAccountType(sourceDF: DataFrame, targetDF: DataFrame): Seq[String] = {
  import sourceDF.sparkSession.implicits._

  // Hardcoded prefixes for aAccountType
  val bankAccountPrefixes = Array("HK100", "HK102", "HK103", "HK400", "HK404", "HKG00", "KEFIX", "KEPRM", 
                                  "MUBRN", "MUPRM", "OBBRN", "SCBRN", "SCVSP", "SH403", "SH404", "SHG00", 
                                  "UGFLX", "UGVSP", "UKUBA", "ZACAR", "ZACHE", "ZACTS", "ZALOA", "ZAMID", 
                                  "ZAMLO", "ZANED", "ZASAV", "ZATDE", "UKGTS")
  
  val creditCardPrefixes = Array("UKPRM", "UKPSP", "UKTPE", "UKBNC", "UKBNW", "UKBPA", "UKBPF", "UKCAM", 
                                 "UKCML", "PTPSP", "ITPSP", "ESPSP")
  
  val mortgagePrefixes = Array("UKTRN")
  
  val defaultType = "BANK ACCOUNT" // Default type if no prefixes match

  // Define a conditional transformation for `aAccountType`
  val source = sourceDF.withColumn("aAccountType",
    when(substring($"aAccountId", 1, 5).isin(bankAccountPrefixes: _*) && $"aAccountId".isNotNull, "BANK ACCOUNT")
      .when(substring($"aAccountId", 1, 5).isin(creditCardPrefixes: _*) && $"aAccountId".isNotNull, "CREDIT CARD")
      .when(substring($"aAccountId", 1, 5).isin(mortgagePrefixes: _*) && $"aAccountId".isNotNull, "MORTGAGE")
      .otherwise(when($"aAccountId".isNotNull, defaultType).otherwise(null))
  ).select($"transaction_id".as("transactionId"), $"aAccountType")

  val target = targetDF.select($"transactionId", $"aAccountType")

  val sourceToTargetDiff = source.exceptAll(target)
  val targetToSourceDiff = target.exceptAll(source)

  val sourceToTargetIds = sourceToTargetDiff.select($"transactionId").as[String].collect()
  val targetToSourceIds = targetToSourceDiff.select($"transactionId").as[String].collect()

  Seq(
    "A Account Type Validation Differences:",
    s"Source to Target Differences: ${sourceToTargetIds.length} found with transaction IDs: ${sourceToTargetIds.mkString(", ")}",
    s"Target to Source Differences: ${targetToSourceIds.length} found with transaction IDs: ${targetToSourceIds.mkString(", ")}"
  )
}

def validateBAccountType(sourceDF: DataFrame, targetDF: DataFrame): Seq[String] = {
  import sourceDF.sparkSession.implicits._

  // Hardcoded prefixes for bAccountType (same as aAccountType in this example)
  val bankAccountPrefixes = Array("HK100", "HK102", "HK103", "HK400", "HK404", "HKG00", "KEFIX", "KEPRM", 
                                  "MUBRN", "MUPRM", "OBBRN", "SCBRN", "SCVSP", "SH403", "SH404", "SHG00", 
                                  "UGFLX", "UGVSP", "UKUBA", "ZACAR", "ZACHE", "ZACTS", "ZALOA", "ZAMID", 
                                  "ZAMLO", "ZANED", "ZASAV", "ZATDE", "UKGTS")
  
  val creditCardPrefixes = Array("UKPRM", "UKPSP", "UKTPE", "UKBNC", "UKBNW", "UKBPA", "UKBPF", "UKCAM", 
                                 "UKCML", "PTPSP", "ITPSP", "ESPSP")
  
  val mortgagePrefixes = Array("UKTRN")
  
  val defaultType = "BANK ACCOUNT" // Default type if no prefixes match

  // Define a conditional transformation for `bAccountType`
  val source = sourceDF.withColumn("bAccountType",
    when(substring($"bAccountId", 1, 5).isin(bankAccountPrefixes: _*) && $"bAccountId".isNotNull, "BANK ACCOUNT")
      .when(substring($"bAccountId", 1, 5).isin(creditCardPrefixes: _*) && $"bAccountId".isNotNull, "CREDIT CARD")
      .when(substring($"bAccountId", 1, 5).isin(mortgagePrefixes: _*) && $"bAccountId".isNotNull, "MORTGAGE")
      .otherwise(when($"bAccountId".isNotNull, defaultType).otherwise(null))
  ).select($"transaction_id".as("transactionId"), $"bAccountType")

  val target = targetDF.select($"transactionId", $"bAccountType")

  val sourceToTargetDiff = source.exceptAll(target)
  val targetToSourceDiff = target.exceptAll(source)

  val sourceToTargetIds = sourceToTargetDiff.select($"transactionId").as[String].collect()
  val targetToSourceIds = targetToSourceDiff.select($"transactionId").as[String].collect()

  Seq(
    "B Account Type Validation Differences:",
    s"Source to Target Differences: ${sourceToTargetIds.length} found with transaction IDs: ${sourceToTargetIds.mkString(", ")}",
    s"Target to Source Differences: ${targetToSourceIds.length} found with transaction IDs: ${targetToSourceIds.mkString(", ")}"
  )
}