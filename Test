def applyDirectColumnValidation(
    sourceCols: String,
    targetCols: String,
    transactionSource: DataFrame,
    caseClass: DataFrame
)(implicit spark: SparkSession): List[String] = {
  import spark.implicits._

  // Split and align column names
  val sourceColumns = sourceCols.split(",").map(_.trim).toSeq
  val targetColumns = targetCols.split(",").map(_.trim).toSeq

  // Ensure equal column counts
  if (sourceColumns.length != targetColumns.length) {
    throw new IllegalArgumentException("Source and target column lists must have the same length.")
  }

  // Select columns and rename for consistency
  val sourceSelected = transactionSource.select(sourceColumns.zipWithIndex.map {
    case (colName, i) => col(colName).as(s"col_$i")
  }: _*)

  val targetSelected = caseClass.select(targetColumns.zipWithIndex.map {
    case (colName, i) => col(colName).as(s"col_$i")
  }: _*)

  // Perform intersect on aligned DataFrames
  val matchingData = sourceSelected.intersect(targetSelected)

  // Collect transaction IDs (from first column, assumed as "col_0" after renaming)
  matchingData.select("col_0").as[String].collect().toList
}