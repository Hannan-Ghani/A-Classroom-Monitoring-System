// Initialize the main validation results accumulator
var validationResults = Seq[String]()

// Sterling Equivalent Validation
validationResults = validationResults ++ validateSterlingEquivalent(transactionSource, caseClass, validationConfigMap)

// Aggregated Transaction Document Type Validation
validationResults = validationResults ++ validateAggregatedTransactionDocumentType(transactionSource, caseClass, validationConfigMap)

// Aggregated Transaction ID Distinct Validation
validationResults = validationResults ++ validateAggregatedTransactionIdDistinct(caseClass, validationConfigMap)

// A Sort Code Validation (Derived from A Account ID)
validationResults = validationResults ++ validateASortCode(transactionSource, caseClass, validationConfigMap)

// B Sort Code Validation (Derived from B Account ID)
validationResults = validationResults ++ validateBSortCode(transactionSource, caseClass, validationConfigMap)

// A Account Type Validation
validationResults = validationResults ++ validateAAccountType(transactionSource, caseClass, validationConfigMap)

// B Account Type Validation
validationResults = validationResults ++ validateBAccountType(transactionSource, caseClass, validationConfigMap)

// A Customer ID Validation
validationResults = validationResults ++ validateACustomerId(transactionSource, caseClass, validationConfigMap)

// B Customer ID Validation
validationResults = validationResults ++ validateBCustomerId(transactionSource, caseClass, validationConfigMap)

// A Account ID Validation
validationResults = validationResults ++ validateAAccountId(transactionSource, caseClass, validationConfigMap)

// B Account ID Validation
validationResults = validationResults ++ validateBAccountId(transactionSource, caseClass, validationConfigMap)

// A Branch Unique ID Validation
validationResults = validationResults ++ validateABranchUniqueId(transactionSource, caseClass, validationConfigMap)

// B Branch Unique ID Validation
validationResults = validationResults ++ validateBBranchUniqueId(transactionSource, caseClass, validationConfigMap)

// Transaction Country ISO3 Validation
validationResults = validationResults ++ validateTransactionCountryISO3(transactionSource, caseClass, validationConfigMap)

// Amount Validation
validationResults = validationResults ++ validateAmount(transactionSource, caseClass, validationConfigMap)

// Non-null Validation
validationResults = validationResults ++ validateNonNullColumns(caseClass, validationConfigMap)

// Null Validation
validationResults = validationResults ++ validateNullColumns(caseClass, validationConfigMap)

// Direct Column Validation
validationResults = validationResults ++ validateDirectColumns(transactionSource, caseClass, validationConfigMap)

// Narrative Validation
validationResults = validationResults ++ validateNarrativeColumns(transactionSource, caseClass, validationConfigMap)

// Print or save all validation results
validationResults.foreach(println)