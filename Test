// Function to read and parse path configuration
def readPathConfig(config: Array[String]): Map[String, String] = {
  config.filterNot(line => line.trim.isEmpty || line.trim.startsWith("#")).flatMap { line =>
    line.split("=").map(_.trim) match {
      case Array(key, value) if key.nonEmpty && value.nonEmpty =>
        Some(key -> value)
      case _ =>
        logger.warn(s"Invalid line in path config: $line")
        None
    }
  }.toMap
}

// Function to read and parse validation configuration
def parseValidationConfig(config: Array[String]): Map[String, Map[String, String]] = {
  var currentSection: String = ""
  var validationConfig: Map[String, Map[String, String]] = Map()

  config.filterNot(line => line.trim.isEmpty || line.trim.startsWith("#")).foreach { line =>
    if (line.startsWith("[") && line.endsWith("]")) {
      currentSection = line.substring(1, line.length - 1).trim
      validationConfig += (currentSection -> Map())
    } else {
      val keyValue = line.split("=").map(_.trim)
      if (keyValue.length == 2 && currentSection.nonEmpty) {
        val currentValues = validationConfig(currentSection)
        validationConfig += (currentSection -> (currentValues + (keyValue(0) -> keyValue(1))))
      } else {
        logger.warn(s"Invalid line in validation config: $line")
      }
    }
  }
  validationConfig
}