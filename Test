// Find the transaction ID column in a case-insensitive manner
val targetTransactionId = caseClass.columns.find(_.equalsIgnoreCase("transactionId")).getOrElse("transactionId")

// Select columns with aliases for alignment
val sourceSelected = transactionSource.select(col(sourceTransactionId).as("col_0") +: sourceColumns.tail.zipWithIndex.map {
  case (colName, i) => col(colName).as(s"col_${i + 1}")
}: _*)

val targetSelected = caseClass.select(col(targetTransactionId).as("col_0") +: targetColumns.tail.zipWithIndex.map {
  case (colName, i) => col(colName).as(s"col_${i + 1}")
}: _*)

// Filtering rows where all specified columns are null
val nullFilteredData = caseClass.filter(nullColumns.map(colName => col(colName).isNull).reduce(_ && _))